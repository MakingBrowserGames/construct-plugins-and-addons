@@START randomColor.js|.js|false|true|false|inline-script
@@TEMPLATE
this._info.AddFileDependency(
{
    filename: "c3runtime/randomColor.js",
    type: "inline-script"
});

@@CONTENT
// randomColor by David Merfield under the CC0 license
// https://github.com/davidmerfield/randomColor/

;
(function(root, factory)
{

    // Support CommonJS
    if (typeof exports === 'object')
    {
        var randomColor = factory();

        // Support NodeJS & Component, which allow module.exports to be a function
        if (typeof module === 'object' && module && module.exports)
        {
            exports = module.exports = randomColor;
        }

        // Support CommonJS 1.1.1 spec
        exports.randomColor = randomColor;

        // Support AMD
    }
    else if (typeof define === 'function' && define.amd)
    {
        define([], factory);

        // Support vanilla script loading
    }
    else
    {
        root.randomColor = factory();
    }

}(this, function()
{

    // Seed to get repeatable colors
    var seed = null;

    // Shared color dictionary
    var colorDictionary = {};

    // Populate the color dictionary
    loadColorBounds();

    // check if a range is taken
    var colorRanges = [];

    var randomColor = function(options)
    {

        options = options || {};

        // Check if there is a seed and ensure it's an
        // integer. Otherwise, reset the seed value.
        if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10))
        {
            seed = options.seed;

            // A string was passed as a seed
        }
        else if (typeof options.seed === 'string')
        {
            seed = stringToInteger(options.seed);

            // Something was passed as a seed but it wasn't an integer or string
        }
        else if (options.seed !== undefined && options.seed !== null)
        {
            throw new TypeError('The seed value must be an integer or string');

            // No seed, reset the value outside.
        }
        else
        {
            seed = null;
        }

        var H, S, B;

        // Check if we need to generate multiple colors
        if (options.count !== null && options.count !== undefined)
        {

            var totalColors = options.count,
                colors = [];
            // Value false at index i means the range i is not taken yet.
            for (var i = 0; i < options.count; i++)
            {
                colorRanges.push(false)
            }
            options.count = null;

            while (totalColors > colors.length)
            {

                // Since we're generating multiple colors,
                // incremement the seed. Otherwise we'd just
                // generate the same color each time...
                if (seed && options.seed) options.seed += 1;

                colors.push(randomColor(options));
            }

            options.count = totalColors;

            return colors;
        }

        // First we pick a hue (H)
        H = pickHue(options);

        // Then use H to determine saturation (S)
        S = pickSaturation(H, options);

        // Then use S and H to determine brightness (B).
        B = pickBrightness(H, S, options);

        // Then we return the HSB color in the desired format
        return setFormat([H, S, B], options);
    };

    function pickHue(options)
    {
        if (colorRanges.length > 0)
        {
            var hueRange = getRealHueRange(options.hue)

            var hue = randomWithin(hueRange)

            //Each of colorRanges.length ranges has a length equal approximatelly one step
            var step = (hueRange[1] - hueRange[0]) / colorRanges.length

            var j = parseInt((hue - hueRange[0]) / step)

            //Check if the range j is taken
            if (colorRanges[j] === true)
            {
                j = (j + 2) % colorRanges.length
            }
            else
            {
                colorRanges[j] = true
            }

            var min = (hueRange[0] + j * step) % 359,
                max = (hueRange[0] + (j + 1) * step) % 359;

            hueRange = [min, max]

            hue = randomWithin(hueRange)

            if (hue < 0)
            {
                hue = 360 + hue;
            }
            return hue
        }
        else
        {
            var hueRange = getHueRange(options.hue)

            hue = randomWithin(hueRange);
            // Instead of storing red as two seperate ranges,
            // we group them, using negative numbers
            if (hue < 0)
            {
                hue = 360 + hue;
            }

            return hue;
        }
    }

    function pickSaturation(hue, options)
    {

        if (options.hue === 'monochrome')
        {
            return 0;
        }

        if (options.luminosity === 'random')
        {
            return randomWithin([0, 100]);
        }

        var saturationRange = getSaturationRange(hue);

        var sMin = saturationRange[0],
            sMax = saturationRange[1];

        switch (options.luminosity)
        {

            case 'bright':
                sMin = 55;
                break;

            case 'dark':
                sMin = sMax - 10;
                break;

            case 'light':
                sMax = 55;
                break;
        }

        return randomWithin([sMin, sMax]);

    }

    function pickBrightness(H, S, options)
    {

        var bMin = getMinimumBrightness(H, S),
            bMax = 100;

        switch (options.luminosity)
        {

            case 'dark':
                bMax = bMin + 20;
                break;

            case 'light':
                bMin = (bMax + bMin) / 2;
                break;

            case 'random':
                bMin = 0;
                bMax = 100;
                break;
        }

        return randomWithin([bMin, bMax]);
    }

    function setFormat(hsv, options)
    {

        switch (options.format)
        {

            case 'hsvArray':
                return hsv;

            case 'hslArray':
                return HSVtoHSL(hsv);

            case 'hsl':
                var hsl = HSVtoHSL(hsv);
                return 'hsl(' + hsl[0] + ', ' + hsl[1] + '%, ' + hsl[2] + '%)';

            case 'hsla':
                var hslColor = HSVtoHSL(hsv);
                var alpha = options.alpha || Math.random();
                return 'hsla(' + hslColor[0] + ', ' + hslColor[1] + '%, ' + hslColor[2] + '%, ' + alpha + ')';

            case 'rgbArray':
                return HSVtoRGB(hsv);

            case 'rgb':
                var rgb = HSVtoRGB(hsv);
                return 'rgb(' + rgb.join(', ') + ')';

            case 'rgba':
                var rgbColor = HSVtoRGB(hsv);
                var alpha = options.alpha || Math.random();
                return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';

            default:
                return HSVtoHex(hsv);
        }

    }

    function getMinimumBrightness(H, S)
    {

        var lowerBounds = getColorInfo(H).lowerBounds;

        for (var i = 0; i < lowerBounds.length - 1; i++)
        {

            var s1 = lowerBounds[i][0],
                v1 = lowerBounds[i][1];

            var s2 = lowerBounds[i + 1][0],
                v2 = lowerBounds[i + 1][1];

            if (S >= s1 && S <= s2)
            {

                var m = (v2 - v1) / (s2 - s1),
                    b = v1 - m * s1;

                return m * S + b;
            }

        }

        return 0;
    }

    function getHueRange(colorInput)
    {

        if (typeof parseInt(colorInput) === 'number')
        {

            var number = parseInt(colorInput);

            if (number < 360 && number > 0)
            {
                return [number, number];
            }

        }

        if (typeof colorInput === 'string')
        {

            if (colorDictionary[colorInput])
            {
                var color = colorDictionary[colorInput];
                if (color.hueRange)
                {
                    return color.hueRange;
                }
            }
            else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i))
            {
                var hue = HexToHSB(colorInput)[0];
                return [hue, hue];
            }
        }

        return [0, 360];

    }

    function getSaturationRange(hue)
    {
        return getColorInfo(hue).saturationRange;
    }

    function getColorInfo(hue)
    {

        // Maps red colors to make picking hue easier
        if (hue >= 334 && hue <= 360)
        {
            hue -= 360;
        }

        for (var colorName in colorDictionary)
        {
            var color = colorDictionary[colorName];
            if (color.hueRange &&
                hue >= color.hueRange[0] &&
                hue <= color.hueRange[1])
            {
                return colorDictionary[colorName];
            }
        }
        return 'Color not found';
    }

    function randomWithin(range)
    {
        if (seed === null)
        {
            //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
            var golden_ratio = 0.618033988749895
            var r = Math.random()
            r += golden_ratio
            r %= 1
            return Math.floor(range[0] + r * (range[1] + 1 - range[0]));
        }
        else
        {
            //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/
            var max = range[1] || 1;
            var min = range[0] || 0;
            seed = (seed * 9301 + 49297) % 233280;
            var rnd = seed / 233280.0;
            return Math.floor(min + rnd * (max - min));
        }
    }

    function HSVtoHex(hsv)
    {

        var rgb = HSVtoRGB(hsv);

        function componentToHex(c)
        {
            var hex = c.toString(16);
            return hex.length == 1 ? '0' + hex : hex;
        }

        var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);

        return hex;

    }

    function defineColor(name, hueRange, lowerBounds)
    {

        var sMin = lowerBounds[0][0],
            sMax = lowerBounds[lowerBounds.length - 1][0],

            bMin = lowerBounds[lowerBounds.length - 1][1],
            bMax = lowerBounds[0][1];

        colorDictionary[name] = {
            hueRange: hueRange,
            lowerBounds: lowerBounds,
            saturationRange: [sMin, sMax],
            brightnessRange: [bMin, bMax]
        };

    }

    function loadColorBounds()
    {

        defineColor(
            'monochrome',
        null, [[0, 0], [100, 0]]);

        defineColor(
            'red', [-26, 18], [[20, 100], [30, 92], [40, 89], [50, 85], [60, 78], [70, 70], [80, 60], [90, 55], [100, 50]]);

        defineColor(
            'orange', [19, 46], [[20, 100], [30, 93], [40, 88], [50, 86], [60, 85], [70, 70], [100, 70]]);

        defineColor(
            'yellow', [47, 62], [[25, 100], [40, 94], [50, 89], [60, 86], [70, 84], [80, 82], [90, 80], [100, 75]]);

        defineColor(
            'green', [63, 178], [[30, 100], [40, 90], [50, 85], [60, 81], [70, 74], [80, 64], [90, 50], [100, 40]]);

        defineColor(
            'blue', [179, 257], [[20, 100], [30, 86], [40, 80], [50, 74], [60, 60], [70, 52], [80, 44], [90, 39], [100, 35]]);

        defineColor(
            'purple', [258, 282], [[20, 100], [30, 87], [40, 79], [50, 70], [60, 65], [70, 59], [80, 52], [90, 45], [100, 42]]);

        defineColor(
            'pink', [283, 334], [[20, 100], [30, 90], [40, 86], [60, 84], [80, 80], [90, 75], [100, 73]]);

    }

    function HSVtoRGB(hsv)
    {

        // this doesn't work for the values of 0 and 360
        // here's the hacky fix
        var h = hsv[0];
        if (h === 0)
        {
            h = 1;
        }
        if (h === 360)
        {
            h = 359;
        }

        // Rebase the h,s,v values
        h = h / 360;
        var s = hsv[1] / 100,
            v = hsv[2] / 100;

        var h_i = Math.floor(h * 6),
            f = h * 6 - h_i,
            p = v * (1 - s),
            q = v * (1 - f * s),
            t = v * (1 - (1 - f) * s),
            r = 256,
            g = 256,
            b = 256;

        switch (h_i)
        {
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            case 5:
                r = v;
                g = p;
                b = q;
                break;
        }

        var result = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
        return result;
    }

    function HexToHSB(hex)
    {
        hex = hex.replace(/^#/, '');
        hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;

        var red = parseInt(hex.substr(0, 2), 16) / 255,
            green = parseInt(hex.substr(2, 2), 16) / 255,
            blue = parseInt(hex.substr(4, 2), 16) / 255;

        var cMax = Math.max(red, green, blue),
            delta = cMax - Math.min(red, green, blue),
            saturation = cMax ? (delta / cMax) : 0;

        switch (cMax)
        {
            case red:
                return [60 * (((green - blue) / delta) % 6) || 0, saturation, cMax];
            case green:
                return [60 * (((blue - red) / delta) + 2) || 0, saturation, cMax];
            case blue:
                return [60 * (((red - green) / delta) + 4) || 0, saturation, cMax];
        }
    }

    function HSVtoHSL(hsv)
    {
        var h = hsv[0],
            s = hsv[1] / 100,
            v = hsv[2] / 100,
            k = (2 - s) * v;

        return [
        h,
        Math.round(s * v / (k < 1 ? k : 2 - k) * 10000) / 100,
        k / 2 * 100];
    }

    function stringToInteger(string)
    {
        var total = 0
        for (var i = 0; i !== string.length; i++)
        {
            if (total >= Number.MAX_SAFE_INTEGER) break;
            total += string.charCodeAt(i)
        }
        return total
    }

    // get The range of given hue when options.count!=0

    function getRealHueRange(colorHue)
    {
        if (!isNaN(colorHue))
        {
            var number = parseInt(colorHue);

            if (number < 360 && number > 0)
            {
                return getColorInfo(colorHue).hueRange
            }
        }
        else if (typeof colorHue === 'string')
        {

            if (colorDictionary[colorHue])
            {
                var color = colorDictionary[colorHue];

                if (color.hueRange)
                {
                    return color.hueRange
                }
            }
            else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i))
            {
                var hue = HexToHSB(colorHue)[0]
                return getColorInfo(hue).hueRange
            }
        }

        return [0, 360]
    }
    return randomColor;
}));

@@BYTES

@@END randomColor.js

@@START randomColor_Utility.js|.js|false|true|false|inline-script
@@TEMPLATE
this._info.AddFileDependency(
{
    filename: "c3runtime/randomColor_Utility.js",
    type: "inline-script"
});

@@CONTENT
// converti un numero rappresentante il formato del colore in una stringa

function getComboFormat(n)
{
    /*["rgb", "rgba", "rgbArray", "hsl", "hsla", "hslArray", "hex"]*/
    switch (n)
    {
        case 0:
            return "rgb";
            break;
        case 1:
            return "rgba";
            break;
        case 2:
            return "rgbArray";
            break;
        case 3:
            return "hsl";
            break;
        case 4:
            return "hsla";
            break;
        case 5:
            return "hslArray";
            break;
        case 6:
            return "hex";
            break;
        default:
            return "hex";
            break;
    }
}

// converti un numero rappresentante la luminosità in una stringa

function getComboLuminosity(n)
{
    /*["random", "bright", "light", "dark"]*/
    switch (n)
    {
        case 0:
            return "random";
            break;
        case 1:
            return "bright";
            break;
        case 2:
            return "light";
            break;
        case 3:
            return "dark";
            break;
        default:
            return "random";
            break;
    }
}

// converti una stringa in un colore C3

function convertColorToC3Color(format, color)
{
    let c3color = new C3.Color;

    let r = 255;
    let g = 255;
    let b = 255;
    let a = 1;

    if (format == "hex")
    {
        let tempC = hexToRgb(color);
        r = tempC.r;
        g = tempC.g;
        b = tempC.b;
    }
    else if (format == "rgb")
    {
        let tempC = rgbToRgb(color);
        r = tempC.r;
        g = tempC.g;
        b = tempC.b;
    }
    else if (format == "rgba")
    {
        let tempC = rgbaToRgba(color);
        r = tempC.r;
        g = tempC.g;
        b = tempC.b;
        a = tempC.a;
    }
    else if (format == "rgbArray")
    {
        r = color[0];
        g = color[1];
        b = color[2];
    }
    else if (format == "hsl")
    {
        let tempC = HSLstringToRGB(color);
        r = tempC.r;
        g = tempC.g;
        b = tempC.b;
    }
    else if (format == "hslArray")
    {
        let tempC = HSLToRGB(color[0], color[1], color[2]);
        r = tempC.r;
        g = tempC.g;
        b = tempC.b;
    }
    else if (format == "hsla")
    {
        let tempC = HSLAToRGBA(color);
        r = tempC.r;
        g = tempC.g;
        b = tempC.b;
        a = tempC.a;
    }

    c3color.setRgba(r / 255, g / 255, b / 255, a);
    return c3color;
}


function hexToRgb(hex)
{
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b)
    {
        return r + r + g + g + b + b;
    });

    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

function rgbToRgb(rgb)
{
    const result = rgb.substring(4, rgb.length - 1)
        .replace(/ /g, '')
        .split(',');
    return {
        r: parseInt(result[0]),
        g: parseInt(result[1]),
        b: parseInt(result[2]),
        a: 1
    }
}

function rgbaToRgba(rgba)
{
    //console.log(rgba);
    const result = rgba.substring(5, rgba.length - 1)
        .replace(/ /g, '')
        .split(',');
    //console.log(result);
    return {
        r: parseInt(result[0]),
        g: parseInt(result[1]),
        b: parseInt(result[2]),
        a: parseFloat(result[3])
    }
}

function HSLstringToRGB(hsl)
{
    let sep = hsl.indexOf(",") > -1 ? "," : " ";
    hsl = hsl.substr(4).split(")")[0].split(sep);

    let h = hsl[0],
    s = hsl[1].substr(0, hsl[1].length - 1) / 100,
    l = hsl[2].substr(0, hsl[2].length - 1) / 100;

    // Strip label and convert to degrees (if necessary)
    if (h.indexOf("deg") > -1) h = h.substr(0, h.length - 3);
    else if (h.indexOf("rad") > -1) h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));
    else if (h.indexOf("turn") > -1) h = Math.round(h.substr(0, h.length - 4) * 360);
    // Keep hue fraction of 360 if ending up over
    if (h >= 360) h %= 360;

    let c = (1 - Math.abs(2 * l - 1)) * s,
    x = c * (1 - Math.abs((h / 60) % 2 - 1)),
    m = l - c / 2,
    r = 0,
    g = 0,
    b = 0;
    if (0 <= h && h < 60)
    {
        r = c;
        g = x;
        b = 0;
    }
    else if (60 <= h && h < 120)
    {
        r = x;
        g = c;
        b = 0;
    }
    else if (120 <= h && h < 180)
    {
        r = 0;
        g = c;
        b = x;
    }
    else if (180 <= h && h < 240)
    {
        r = 0;
        g = x;
        b = c;
    }
    else if (240 <= h && h < 300)
    {
        r = x;
        g = 0;
        b = c;
    }
    else if (300 <= h && h < 360)
    {
        r = c;
        g = 0;
        b = x;
    }
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);

    return {
        r: r,
        g: g,
        b: b
    }
}

function HSLToRGB(h, s, l)
{
    // Must be fractions of 1
    s /= 100;
    l /= 100;

    let c = (1 - Math.abs(2 * l - 1)) * s,
    x = c * (1 - Math.abs((h / 60) % 2 - 1)),
    m = l - c / 2,
    r = 0,
    g = 0,
    b = 0;

    if (0 <= h && h < 60)
    {
        r = c;
        g = x;
        b = 0;
    }
    else if (60 <= h && h < 120)
    {
        r = x;
        g = c;
        b = 0;
    }
    else if (120 <= h && h < 180)
    {
        r = 0;
        g = c;
        b = x;
    }
    else if (180 <= h && h < 240)
    {
        r = 0;
        g = x;
        b = c;
    }
    else if (240 <= h && h < 300)
    {
        r = x;
        g = 0;
        b = c;
    }
    else if (300 <= h && h < 360)
    {
        r = c;
        g = 0;
        b = x;
    }
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);

    return {
        r: r,
        g: g,
        b: b
    }
}

function HSLAToRGBA(hsla)
{
    let sep = hsla.indexOf(",") > -1 ? "," : " ";
    hsla = hsla.substr(5).split(")")[0].split(sep);

    if (hsla.indexOf("/") > -1) hsla.splice(3, 1);

    let h = hsla[0],
    s = hsla[1].substr(0, hsla[1].length - 1) / 100,
    l = hsla[2].substr(0, hsla[2].length - 1) / 100,
    a = hsla[3];

    if (h.indexOf("deg") > -1) h = h.substr(0, h.length - 3);
    else if (h.indexOf("rad") > -1) h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));
    else if (h.indexOf("turn") > -1) h = Math.round(h.substr(0, h.length - 4) * 360);
    if (h >= 360) h %= 360;

    let c = (1 - Math.abs(2 * l - 1)) * s,
    x = c * (1 - Math.abs((h / 60) % 2 - 1)),
    m = l - c / 2,
    r = 0,
    g = 0,
    b = 0;
    if (0 <= h && h < 60)
    {
        r = c;
        g = x;
        b = 0;
    }
    else if (60 <= h && h < 120)
    {
        r = x;
        g = c;
        b = 0;
    }
    else if (120 <= h && h < 180)
    {
        r = 0;
        g = c;
        b = x;
    }
    else if (180 <= h && h < 240)
    {
        r = 0;
        g = x;
        b = c;
    }
    else if (240 <= h && h < 300)
    {
        r = x;
        g = 0;
        b = c;
    }
    else if (300 <= h && h < 360)
    {
        r = c;
        g = 0;
        b = x;
    }
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);

    return {
        r: r,
        g: g,
        b: b,
        a: a
    }

}

@@BYTES

@@END randomColor_Utility.js

@@START utility.js|.js|false|true|false|inline-script
@@TEMPLATE
this._info.AddFileDependency(
{
    filename: "c3runtime/utility.js",
    type: "inline-script"
});

@@CONTENT
// vuoto

@@BYTES
Ly8gdnVvdG8=
@@END utility.js

