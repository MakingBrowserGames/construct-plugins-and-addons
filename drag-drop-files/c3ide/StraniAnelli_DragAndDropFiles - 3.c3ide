{"Id":"02f334ee-3249-46e6-856b-d34c0d39bf29","Name":"Drag and Drop Files","Class":"MyDOMplugin","Company":"Scirra","Author":"Strani Anelli","AddonId":"StraniAnelli_DragAndDropFiles","Description":"Example custom DOM element Construct 3 plugin.","AddonFolder":"C:\\Users\\el3um\\AppData\\Roaming\\C3IDE_DATA\\Server\\Test\\mydomplugin","AddonCategory":"other","MajorVersion":0,"MinorVersion":0,"RevisionVersion":1,"BuildVersion":0,"Type":2,"TypeName":"(Plugin)","IconXml":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n\t width=\"1700.79004px\" height=\"1700.79004px\" viewBox=\"499 379 690 690\"\r\n\t enable-background=\"new 0 0 1700.79004 1700.79004\" xml:space=\"preserve\">\r\n<g id=\"bg\">\r\n\t<g>\r\n\t\t<g>\r\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#D2E1F0\" d=\"M850.39453,860.66992\r\n\t\t\t\tc-50.35645,0-94.3252-27.35645-117.85254-68.02051l-80.03027,46.2041c-4.6543,2.68945-6.13086,8.71875-3.24805,13.25586\r\n\t\t\t\tC691.50098,918.5957,765.7959,962.7168,850.39453,962.7168c88.12598,0,165.07129-47.875,206.24316-119.03613l-80.48633-46.46973\r\n\t\t\t\tc-4.31445-2.49023-9.80273-1.20508-12.57129,2.93555C939.1748,836.64063,897.59082,860.66992,850.39453,860.66992\r\n\t\t\t\tL850.39453,860.66992z M1136.7207,559.2959c4.61426-2.66309,6.11035-8.61914,3.3125-13.15137\r\n\t\t\t\tc-59.91504-97.03027-167.22461-161.69434-289.63867-161.69434c-125.89355,0-235.81348,68.39258-294.63379,170.0498\r\n\t\t\t\tl80.37695,46.40625c4.39844,2.53906,10.00195,1.14941,12.71094-3.14551\r\n\t\t\t\tc42.16406-66.85156,116.66992-111.26367,201.5459-111.26367c88.12598,0,165.07129,47.87598,206.24316,119.03613\r\n\t\t\t\tL1136.7207,559.2959z\"/>\r\n\t\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#96AAB9\" d=\"M850.39453,962.7168\r\n\t\t\t\tc-84.59863,0-158.89355-44.12109-201.13086-110.60742c-2.87695-4.53027-1.40039-10.57031,3.24805-13.25586l80.03027-46.2041\r\n\t\t\t\tc-11.58105-20.0166-18.20996-43.25488-18.20996-68.04199c0-74.78516,60.55762-136.0625,136.0625-136.0625\r\n\t\t\t\tc47.19629,0,88.78027,24.0293,113.18555,60.52246c2.76465,4.13379,8.26367,5.42188,12.57129,2.93555l80.48633-46.46973\r\n\t\t\t\tc-41.17188-71.16016-118.11719-119.03613-206.24316-119.03613c-84.87598,0-159.38184,44.41211-201.5459,111.26367\r\n\t\t\t\tc-2.70605,4.29102-8.31836,5.68164-12.71094,3.14551L555.76074,554.5c-28.95215,50.04004-45.52344,108.13965-45.52344,170.10742\r\n\t\t\t\tc0,186.96484,151.39453,340.1582,340.15723,340.1582c122.41406,0,229.72363-64.66406,289.63867-161.69531\r\n\t\t\t\tc2.7959-4.52734,1.29492-10.49023-3.3125-13.15234l-80.08301-46.2373\r\n\t\t\t\tC1015.46582,914.8418,938.52051,962.7168,850.39453,962.7168z\"/>\r\n\t\t</g>\r\n\t\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#00E1C8\" d=\"M1137.18457,761.19141v-73.16797l-63.36523,36.58398\r\n\t\t\tL1137.18457,761.19141L1137.18457,761.19141z M1026.5752,708.24219l120.05859-69.31641\r\n\t\t\tc12.56836-7.25586,28.3457,1.85254,28.3457,16.36621v138.63086c0,14.5127-15.77734,23.62207-28.3457,16.36621\r\n\t\t\tl-120.05859-69.31641C1014.02734,733.72754,1014.02734,715.4873,1026.5752,708.24219z\"/>\r\n\t</g>\r\n</g>\r\n<g id=\"logo\">\r\n</g>\r\n</svg>","IconImage":"System.Windows.Media.Imaging.BitmapImage","CreateDate":"2019-09-07T23:23:07.076+02:00","LastModified":"2019-09-08T20:40:54.7182411+02:00","ChangeDate":"2019-09-08, 08:40","AddonJson":"{\r\n  \"is-c3-addon\": true,\r\n  \"type\": \"plugin\",\r\n  \"name\": \"Drag and Drop Files\",\r\n  \"id\": \"StraniAnelli_DragAndDropFiles\",\r\n  \"version\": \"1.0.0.0\",\r\n  \"author\": \"Strani Anelli\",\r\n  \"website\": \"https://www.construct.net\",\r\n  \"documentation\": \"https://www.construct.net\",\r\n  \"description\": \"Drag and Drop Files into Construct 3.\",\r\n  \"editor-scripts\": [\r\n    \"plugin.js\",\r\n    \"type.js\",\r\n    \"instance.js\"\r\n  ],\r\n  \"file-list\": [\r\n    \"c3runtime/plugin.js\",\r\n    \"c3runtime/type.js\",\r\n    \"c3runtime/instance.js\",\r\n    \"c3runtime/conditions.js\",\r\n    \"c3runtime/actions.js\",\r\n    \"c3runtime/expressions.js\",\r\n    \"lang/en-US.json\",\r\n    \"aces.json\",\r\n    \"addon.json\",\r\n    \"icon.svg\",\r\n    \"plugin.js\",\r\n    \"type.js\",\r\n    \"instance.js\",\r\n    \"c3runtime/domSide.js\"\r\n  ]\r\n}","PluginEditTime":"\"use strict\";\n\n{\n\t////////////////////////////////////////////\n\t// The plugin ID is how Construct identifies different kinds of plugins.\n\t// *** NEVER CHANGE THE PLUGIN ID! ***\n\t// If you change the plugin ID after releasing the plugin, Construct will think it is an entirely different\n\t// plugin and assume it is incompatible with the old one, and YOU WILL BREAK ALL EXISTING PROJECTS USING THE PLUGIN.\n\t// Only the plugin name is displayed in the editor, so to rename your plugin change the name but NOT the ID.\n\t// If you want to completely replace a plugin, make it deprecated (it will be hidden but old projects keep working),\n\t// and create an entirely new plugin with a different plugin ID.\n\tconst PLUGIN_ID = \"StraniAnelli_DragAndDropFiles\";\n\t////////////////////////////////////////////\n\t\n\tconst PLUGIN_VERSION = \"1.0.0.0\";\n\tconst PLUGIN_CATEGORY = \"form-controls\";\t// The 'Form controls' category is recommended for DOM element plugins\n\t\n\tlet app = null;\n\t\n\tconst PLUGIN_CLASS = SDK.Plugins.StraniAnelli_DragAndDropFiles = class MyDrawingPlugin extends SDK.IPluginBase\n\t{\n\t\tconstructor()\n\t\t{\n\t\t\tsuper(PLUGIN_ID);\n\t\t\t\n\t\t\tSDK.Lang.PushContext(\"plugins.\" + PLUGIN_ID.toLowerCase());\n\t\t\t\n\t\t\tthis._info.SetName(lang(\".name\"));\n\t\t\tthis._info.SetDescription(lang(\".description\"));\n\t\t\tthis._info.SetVersion(PLUGIN_VERSION);\n\t\t\tthis._info.SetCategory(PLUGIN_CATEGORY);\n\t\t\tthis._info.SetAuthor(\"Strani Anelli\");\n\t\t\tthis._info.SetHelpUrl(lang(\".help-url\"));\n\t\t\tthis._info.SetPluginType(\"world\");\t\t\t// mark as world plugin since it's placed in the layout\n\t\t\tthis._info.SetIsResizable(true);\t\t\t// allow to be resized\n\t\t\t\n\t\t\t// Load domSide.js in the document context (main thread).\n\t\t\t// This is important for supporting the runtime's web worker mode.\n\t\t\tthis._info.SetDOMSideScripts([\"c3runtime/domSide.js\"]);\n\t\t\t\n\t\t\t// Only support the newer C3 runtime\n\t\t\tthis._info.SetSupportedRuntimes([\"c3\"]);\n\t\t\t\n\t\t\tSDK.Lang.PushContext(\".properties\");\n\t\t\t\n\t\t\tthis._info.SetProperties([\n\t\t\t\tnew SDK.PluginProperty(\"text\", \"control-text\", \"Drag & Drop files here\"),\n\t\t\t\tnew SDK.PluginProperty(\"text\", \"accept\", \"\"),\n\t\t\t\tnew SDK.PluginProperty(\"check\", \"visible\", true),\n\t\t\t\tnew SDK.PluginProperty(\"integer\", \"font-size\", 12),\n\t\t\t\tnew SDK.PluginProperty(\"text\", \"id\", \"\")\t\t\t\t\n\t\t\t]);\n\t\t\t\n\t\t\tSDK.Lang.PopContext();\t\t// .properties\n\t\t\t\n\t\t\tSDK.Lang.PopContext();\n\t\t}\n\t};\n\t\n\tPLUGIN_CLASS.Register(PLUGIN_ID, PLUGIN_CLASS);\n}","PluginRunTime":"\"use strict\";\n\n{\n\t// NOTE: use a unique DOM component ID to ensure it doesn't clash with anything else\n\t// This must also match the ID in instance.js and domSide.js.\n\tconst DOM_COMPONENT_ID = \"stranianelli_draganddropfiles\";\n\t\n\t// NOTE: DOM plugins derive from C3.SDKDOMPluginBase, not C3.SDKPluginBase.\n\tC3.Plugins.StraniAnelli_DragAndDropFiles = class MyDOMPlugin extends C3.SDKDOMPluginBase\n\t{\n\t\tconstructor(opts)\n\t\t{\n\t\t\tsuper(opts, DOM_COMPONENT_ID);\n\t\t\t\n\t\t\t// Calls to PostToRuntimeElement() in domSide.js are forwarded to the plugin here.\n\t\t\t// The relevant instance is passed as an argument. Generally these messages need to be handled by the\n\t\t\t// instances themselves, so the handlers here just forward messages to instance calls.\n\t\t\t\n\t\t\t// Forward \"click\" messages to the _OnClick method of the relevant instance.\n\t\t\t// Note this also forwards the optional extra details object as the argument 'e', but in this\n\t\t\t// case it's not used for the click handler.\n\t\t\tthis.AddElementMessageHandler(\"click\", (sdkInst, e) => sdkInst._OnClick(e));\n\t\t\t\n\t\t\t//this.AddElementMessageHandler(\"drop\", (sdkInst, e) => sdkInst._OnDrop(e));\n\t\t\tthis.AddElementMessageHandler(\"dragover\", (sdkInst, e) => sdkInst._OnDragOver(e));\n\t\t\t\n\t\t\tthis.AddElementMessageHandler(\"drop\", (sdkInst, e)=>sdkInst._OnDrop(e));\n\t\t}\n\t\t\n\t\tRelease()\n\t\t{\n\t\t\tsuper.Release();\n\t\t}\n\t};\n}","TypeEditTime":"\"use strict\";\n\n{\n\tconst PLUGIN_CLASS = SDK.Plugins.StraniAnelli_DragAndDropFiles;\n\t\n\tPLUGIN_CLASS.Type = class MyDOMPluginType extends SDK.ITypeBase\n\t{\n\t\tconstructor(sdkPlugin, iObjectType)\n\t\t{\n\t\t\tsuper(sdkPlugin, iObjectType);\n\t\t}\n\t};\n}","TypeRunTime":"\"use strict\";\n\n{\n\tC3.Plugins.StraniAnelli_DragAndDropFiles.Type = class MyDOMType extends C3.SDKTypeBase\n\t{\n\t\tconstructor(objectClass)\n\t\t{\n\t\t\tsuper(objectClass);\n\t\t}\n\t\t\n\t\tRelease()\n\t\t{\n\t\t\tsuper.Release();\n\t\t}\n\t\t\n\t\tOnCreate()\n\t\t{\n\t\t\t\n\t\t}\n\t};\n}","InstanceEditTime":"\"use strict\";\n\n{\n\tconst PLUGIN_CLASS = SDK.Plugins.StraniAnelli_DragAndDropFiles;\n\t\n\tPLUGIN_CLASS.Instance = class MyDOMInstance extends SDK.IWorldInstanceBase\n\t{\n\t\tconstructor(sdkType, inst)\n\t\t{\n\t\t\tsuper(sdkType, inst);\n\t\t\t\n\t\t\t// Lazy-created IWebGLText object for button text\n\t\t\tthis._webglText = null;\n\t\t}\n\t\t\n\t\tRelease()\n\t\t{\n\t\t\t// Release the WebGL text if it was created\n\t\t\tif (this._webglText)\n\t\t\t{\n\t\t\t\tthis._webglText.Release();\n\t\t\t\tthis._webglText = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tOnCreate()\n\t\t{\n\t\t\t// Default to top-left origin\n\t\t\tthis._inst.SetOrigin(0, 0);\n\t\t}\n\t\t\n\t\tOnPlacedInLayout()\n\t\t{\n\t\t\t// Set default size\n\t\t\tthis._inst.SetSize(300, 300);\n\t\t}\n\t\t\n\t\t// Most of the code relating to drawing the button text is based on the editorTextPlugin template.\n\t\t// See that plugin template for more text rendering demonstration code.\n\t\t_UpdateWebGLText(iRenderer, iLayoutView)\n\t\t{\n\t\t\tif (!this._webglText)\t\t// lazy-create\n\t\t\t{\n\t\t\t\tthis._webglText = iRenderer.CreateWebGLText();\n\t\t\t\tthis._webglText.SetFontSize(this._inst.GetPropertyValue(\"font-size\"));\n\t\t\t\tthis._webglText.SetTextureUpdateCallback(() => iLayoutView.Refresh());\n\t\t\t\tthis._webglText.SetHorizontalAlignment(\"center\");\n\t\t\t\tthis._webglText.SetVerticalAlignment(\"center\");\n\t\t\t}\n\t\t\t\n\t\t\tconst textZoom = iLayoutView.GetZoomFactor();\n\t\t\tthis._webglText.SetSize(this._inst.GetWidth(), this._inst.GetHeight(), textZoom);\n\t\t\t\n\t\t\tthis._webglText.SetText(this._inst.GetPropertyValue(\"control-text\"));\n\t\t}\n\t\t\n\t\t// Render a button label on a grey background for the editor as a placeholder.\n\t\t// Note the pixel-snapping path for text rendering is omitted for brevity. See the editorTextPlugin\n\t\t// template for a full text rendering implementation.\n\t\tDraw(iRenderer, iDrawParams)\n\t\t{\n\t\t\tconst iLayoutView = iDrawParams.GetLayoutView();\n\t\t\tthis._UpdateWebGLText(iRenderer, iLayoutView);\n\t\t\t\n\t\t\tthis._inst.ApplyBlendMode(iRenderer);\n\t\t\tiRenderer.SetColorFillMode();\n\t\t\t\n\t\t\tconst quad = this._inst.GetQuad();\n\t\t\t\n\t\t\t// Draw grey fill and black outline for button background\n\t\t\tiRenderer.SetColorRgba(0.8, 0.8, 0.8, 1);\n\t\t\tiRenderer.Quad(quad);\n\t\t\t\n\t\t\tiRenderer.SetColorRgba(0, 0, 0, 1);\n\t\t\tiRenderer.LineQuad(quad);\n\t\t\t\n\t\t\t// Draw button text on top\n\t\t\tconst texture = this._webglText.GetTexture();\n\t\t\tif (!texture)\n\t\t\t\treturn;\t\t// not yet loaded WebGLText - just ignore and skip rendering text, it'll appear momentarily\n\t\t\t\n\t\t\tiRenderer.SetTextureFillMode();\n\t\t\tiRenderer.SetTexture(texture);\n\t\t\tiRenderer.ResetColor();\n\t\t\tiRenderer.Quad3(quad, this._webglText.GetTexRect());\n\t\t}\n\t\t\n\t\tOnPropertyChanged(id, value)\n\t\t{\n\t\t}\n\t\t\n\t\tLoadC2Property(name, valueString)\n\t\t{\n\t\t\treturn false;\t\t// not handled\n\t\t}\n\t};\n}","InstanceRunTime":"\"use strict\";\n\n{\n\t// NOTE: use a unique DOM component ID to ensure it doesn't clash with anything else.\n\t// This must also match the ID in plugin.js and domSide.js.\n\tconst DOM_COMPONENT_ID = \"stranianelli_draganddropfiles\";\n\n\t// NOTE: DOM instances derive from C3.SDKDOMInstanceBase, not C3.SDKWorldInstanceBase.\n\tC3.Plugins.StraniAnelli_DragAndDropFiles.Instance = class MyDOMInstance extends C3.SDKDOMInstanceBase\n\t{\n\t\tconstructor(inst, properties)\n\t\t{\n\t\t\tsuper(inst, DOM_COMPONENT_ID);\n\t\t\t\n\t\t\t// Keep a copy of the button text on the instance, so it can be returned from an expression.\n\t\t\tthis._text = \"Drag & Drop files here\";\n\t\t\tthis._accept = \"\";\n\t\t\tthis._id = \"\";\n\t\t\tthis._visible = true;\n\t\t\tthis._fontsize = 12;\n\t\t\tthis._files = [];\n\t\t\t\n\t\t\tif (properties)\n\t\t\t{\n\t\t\t\tthis._text = properties[0];\n\t\t\t\tthis._accept = properties[1];\n\t\t\t\tthis._visible = properties[2];\n\t\t\t\tthis._fontsize = properties[3];\n\t\t\t\tthis._id = properties[4];\n\t\t\t}\n\t\t\t\n\t\t\t// Create an element for this instance. The runtime handles this and will result in a call\n\t\t\t// to CreateElement() in domSide.js where the real DOM calls are made.\n\t\t\tthis.CreateElement( {\n\t\t\t\t\t\"id\": this._id,\n\t\t\t\t\t\"accept\": this._accept,\n\t\t\t\t\t\"visible\": this._visible,\n\t\t\t\t\t\"fontsize\": this._fontsize\n\t\t\t\t});\n\t\t}\n\t\t\n\t\tRelease()\n\t\t{\n\t\t\tsuper.Release();\n\t\t}\n\t\t\n\t\tGetElementState()\n\t\t{\n\t\t\t// Return JSON with the state of the element. This is passed along to both CreateElement()\n\t\t\t// and UpdateState() in domSide.js. It provides a convenient way to send all the DOM element\n\t\t\t// state in one go, ensuring any changes are reflected in the real element.\n\t\t\treturn {\n\t\t\t\t\"text\": this._text,\n\t\t\t\t\"accept\": this._accept,\n\t\t\t\t\"visible\": this._visible\n\t\t\t};\n\t\t}\n\t\t\n\t\t\n\t\t_GetFileAt(a) {\n            return a = Math.floor(a),\n            0 > a || a >= this._files.length ? null : this._files[a]\n        }\n\t\t\n\t\t// Called when the button is clicked. This is done by attaching a \"click\" handler in domSide.js\n\t\t// which calls PostToRuntimeElement() to send a \"click\" message to the plugin. The plugin then\n\t\t// forwards it to the instance by calling this method (see plugin.js). Note if an object was passed in\n\t\t// the third parameter to PostToRuntimeElement(), this will be passed along as the parameter here,\n\t\t// but in this case it's not used.\n\t\t_OnClick(e)\n\t\t{\n\t\t\tthis.Trigger(C3.Plugins.StraniAnelli_DragAndDropFiles.Cnds.OnClick);\n\t\t}\n\t\t\n\t\tasync _OnDrop(e)\n\t\t{\n\t\t\tthis._files = e[\"files\"];\n\t\t\tawait this.Trigger(C3.Plugins.StraniAnelli_DragAndDropFiles.Cnds.OnDrop);\n\t\t}\n\t\t\n\t\t_OnDragOver(e)\n\t\t{\n\t\t\tthis.Trigger(C3.Plugins.StraniAnelli_DragAndDropFiles.Cnds.OnDragOver);\n\t\t}\n\t\t\n\t\tDraw(renderer)\n\t\t{\n\t\t\t// not used - a DOM element is positioned at this instance instead\n\t\t}\n\t\t\n\t\tSaveToJson()\n\t\t{\n\t\t\treturn {\n\t\t\t\t// data to be saved for savegames\n\t\t\t\t\"text\": this._text\n\t\t\t};\n\t\t}\n\t\t\n\t\tLoadFromJson(o)\n\t\t{\n\t\t\t// load state for savegames\n\t\t\tthis._text = o[\"text\"];\n\t\t\t\n\t\t\tthis.UpdateElementState();\t\t// ensures any state changes are updated in the DOM\n\t\t}\n\t};\n\t\n}","LanguageProperties":"\"properties\": {\r\n    \"control-text\": {\r\n      \"name\": \"Text\",\r\n      \"desc\": \"The text to display on the control.\"\r\n    },\r\n    \"accept\": {\r\n      \"name\": \"Accept\",\r\n      \"desc\": \"File type filter, e.g. .png or image/*\"\r\n    },\r\n    \"visible\": {\r\n      \"name\": \"Initially visible\",\r\n      \"desc\": \"Choose if the object is visible when the layout starts.\"\r\n    },\r\n    \"font-size\": {\r\n      \"name\": \"Font Size\",\r\n      \"desc\": \"The size of the text to display, in points (pt).\"\r\n    },\r\n    \"id\": {\r\n      \"name\": \"ID\",\r\n      \"desc\": \"An optional ID for the control allowing it to be styled with CSS from the page HTML.\"\r\n    }\r\n  }","LanguageCategories":"\"aceCategories\": {\r\n    \"appearance\" : \"Appearance\",\n    \"custom\" : \"Drag And Drop\",\n    \"sizeandposition\" : \"Size & Position\"\r\n}","Effect":null,"ThemeCss":null,"ThemeLangauge":null,"Categories":["appearance","custom","sizeandposition"],"Actions":{"set-text":{"Id":"set-text","Category":"appearance","ScriptName":"SetText","Ace":"{\n  \"id\": \"set-text\",\n  \"scriptName\": \"SetText\",\n  \"params\": [\n    {\n      \"id\": \"text\",\n      \"type\": \"string\"\n    }\n  ]\n}","DisplayText":null,"Description":null,"Highlight":null,"Language":"\"set-text\":{\n  \"list-name\": \"Set text\",\n  \"display-text\": \"Set text to [i]{0}[/i]\",\n  \"description\": \"Set the control text.\",\n  \"params\": {\n    \"text\": {\n      \"name\": \"Text\",\n      \"desc\": \"The new text.\"\n    }\n  }\n}","Code":"SetText(text)\n{\n    if (this._text === text) return; // no change\n    // Update the locally stored text, and call UpdateElementState().\n    // This calls GetElementState() - which contains the button text as part of the state -\n    // and then calls UpdateState() in domSide.js with the state object, where the button text\n    // is applied to the DOM element.\n    this._text = text;\n    this.UpdateElementState();\n}","ListName":null,"Async":null,"C2Id":"","Deprecated":""},"set-visible":{"Id":"set-visible","Category":"appearance","ScriptName":"SetVisible","Ace":"{\r\n  \"id\": \"set-visible\",\r\n  \"scriptName\": \"SetVisible\",\r\n  \"highlight\": false,\r\n  \"params\": [\r\n    {\r\n      \"id\": \"visibility\",\r\n      \"type\": \"combo\",\r\n      \"items\": [\r\n        \"invisible\",\r\n        \"visible\"\r\n      ]\r\n    }\r\n  ]\r\n}","DisplayText":"this is the display text","Description":"this is the description","Highlight":"false","Language":"\"set-visible\": {\r\n  \"list-name\": \"Set Visible\",\r\n  \"display-text\": \"Set [b]{0}[/b]\",\r\n  \"description\": \"Hide or show the control\",\r\n  \"params\": {\r\n    \"visibility\": {\r\n      \"name\": \"Visibility\",\r\n      \"desc\": \"Visibility\",\r\n      \"items\": {\r\n        \"invisible\": \"Invisible\",\r\n        \"visible\": \"Visible\"\r\n      }\r\n    }\r\n  }\r\n}","Code":"SetVisible(visibility)\r\n{\r\n\tconst b = this.GetWorldInfo();\r\n    visibility = 0 !== visibility;\r\n    b.IsVisible() === visibility || b.SetVisible(visibility)\r\n    \r\n    this._visible = visibility;\r\n}","ListName":"Set Visible","Async":",\n\t\"isAsync\": true","C2Id":"","Deprecated":""},"set-css-style":{"Id":"set-css-style","Category":"appearance","ScriptName":"SetCssStyle","Ace":"{\r\n  \"id\": \"set-css-style\",\r\n  \"scriptName\": \"SetCssStyle\",\r\n  \"highlight\": false,\r\n  \"params\": [\r\n    {\r\n      \"id\": \"property-name\",\r\n      \"type\": \"string\",\r\n      \"initialValue\": \"\\\"background-color\\\"\"\r\n    },\r\n    {\r\n      \"id\": \"value\",\r\n      \"type\": \"string\",\r\n      \"initialValue\": \"\\\"yellow\\\"\"\r\n    }\r\n  ]\r\n}","DisplayText":"Set CSS style {0} to {1}","Description":"Set a CSS style on the control","Highlight":"false","Language":"\"set-css-style\": {\r\n  \"list-name\": \"Set CSS Style\",\r\n  \"display-text\": \"Set CSS style {0} to {1}\",\r\n  \"description\": \" Set a CSS style on the control\",\r\n  \"params\": {\r\n    \"property-name\": {\r\n      \"name\": \"Property Name\",\r\n      \"desc\": \"A CSS property name to set on the control.\"\r\n    },\r\n    \"value\": {\r\n      \"name\": \"Value\",\r\n      \"desc\": \"A string to assign as the value for this CSS property.\"\r\n    }\r\n  }\r\n}","Code":"SetCssStyle(propertyName,value)\r\n{\r\n\tthis.SetElementCSSStyle(propertyName, value)\r\n}","ListName":"Set CSS Style","Async":null,"C2Id":"","Deprecated":""},"release-file":{"Id":"release-file","Category":"custom","ScriptName":"ReleaseFile","Ace":"{\r\n  \"id\": \"release-file\",\r\n  \"scriptName\": \"ReleaseFile\",\r\n  \"highlight\": false,\r\n  \"params\": [\r\n    {\r\n      \"id\": \"file-url\",\r\n      \"type\": \"string\",\r\n      \"initialValue\": \"\"\r\n    }\r\n  ]\r\n}","DisplayText":"Release file {0}","Description":"Release a file so it is no longer using memory.","Highlight":"false","Language":"\"release-file\": {\r\n\t\"list-name\": \"Release File\",\r\n\t\"display-text\": \"Release file [i]{0}[/i]\",\r\n\t\"description\": \"Release a file so it is no longer using memory.\",\r\n\t\"params\": {\r\n        \"file-url\": {\r\n            \"name\": \"File URL\",\r\n            \"desc\": \"The URL of the file to release.\"\r\n        }\r\n    }\r\n}","Code":"ReleaseFile(fileUrl)\r\n{\r\n\tURL.revokeObjectURL(fileUrl)\r\n}","ListName":"Release File","Async":null,"C2Id":"","Deprecated":""},"set-x":{"Id":"set-x","Category":"sizeandposition","ScriptName":"SetX","Ace":"{\r\n  \"id\": \"set-x\",\r\n  \"scriptName\": \"SetX\",\r\n  \"highlight\": false,\r\n  \"params\": [\r\n    {\r\n      \"id\": \"x\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","DisplayText":"Set X","Description":"Set the object's X co-ordinate","Highlight":"false","Language":"\"set-x\": {\r\n\t\"list-name\": \"Set X\",\r\n\t\"display-text\": \"Set X to [i]{0}[/i]\",\r\n\t\"description\": \"Set the object's X co-ordinate\",\r\n\t\"params\": {\r\n        \"x\": {\r\n            \"name\": \"X\",\r\n            \"desc\": \"New X co-ordinate, in pixels.\"\r\n        }\r\n    }\r\n}","Code":"SetX(x)\r\n{\r\n\tconst b = this.GetWorldInfo();\r\n    b.SetX(x);\r\n}","ListName":"Set X","Async":"","C2Id":"","Deprecated":""},"set-y":{"Id":"set-y","Category":"sizeandposition","ScriptName":"SetY","Ace":"{\r\n  \"id\": \"set-y\",\r\n  \"scriptName\": \"SetY\",\r\n  \"highlight\": false,\r\n  \"params\": [\r\n    {\r\n      \"id\": \"y\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","DisplayText":"Set X","Description":"Set the object's X co-ordinate","Highlight":"false","Language":"\"set-y\": {\r\n\t\"list-name\": \"Set Y\",\r\n\t\"display-text\": \"Set Y to [i]{0}[/i]\",\r\n\t\"description\": \"Set the object's X co-ordinate\",\r\n\t\"params\": {\r\n        \"y\": {\r\n            \"name\": \"Y\",\r\n            \"desc\": \"New Y co-ordinate, in pixels.\"\r\n        }\r\n    }\r\n}","Code":"SetY(y)\r\n{\r\n\tconst b = this.GetWorldInfo();\r\n    b.SetY(y);\r\n}","ListName":"Set X","Async":"","C2Id":"","Deprecated":""},"set-width":{"Id":"set-width","Category":"sizeandposition","ScriptName":"SetWidth","Ace":"{\r\n  \"id\": \"set-width\",\r\n  \"scriptName\": \"SetWidth\",\r\n  \"highlight\": false,\r\n  \"params\": [\r\n    {\r\n      \"id\": \"width\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","DisplayText":"Set X","Description":"Set the object's X co-ordinate","Highlight":"false","Language":"\"set-width\": {\r\n\t\"list-name\": \"Set Width\",\r\n\t\"display-text\": \"Set width to [i]{0}[/i]\",\r\n\t\"description\": \"Set the object's width.\",\r\n\t\"params\": {\r\n        \"width\": {\r\n            \"name\": \"Width\",\r\n            \"desc\": \"New object's width, in pixels.\"\r\n        }\r\n    }\r\n}","Code":"SetWidth(width)\r\n{\r\n\tconst b = this.GetWorldInfo();\r\n    b.SetWidth(width);\r\n}","ListName":"Set X","Async":"","C2Id":"","Deprecated":""},"set-height":{"Id":"set-height","Category":"sizeandposition","ScriptName":"SetHeight","Ace":"{\r\n  \"id\": \"set-height\",\r\n  \"scriptName\": \"SetHeight\",\r\n  \"highlight\": false,\r\n  \"params\": [\r\n    {\r\n      \"id\": \"height\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","DisplayText":"Set X","Description":"Set the object's X co-ordinate","Highlight":"false","Language":"\"set-height\": {\r\n\t\"list-name\": \"Set Height\",\r\n\t\"display-text\": \"Set height to [i]{0}[/i]\",\r\n\t\"description\": \"Set the object's height.\",\r\n\t\"params\": {\r\n        \"height\": {\r\n            \"name\": \"Height\",\r\n            \"desc\": \"New object's height, in pixels.\"\r\n        }\r\n    }\r\n}","Code":"SetHeight(height)\r\n{\r\n\tconst b = this.GetWorldInfo();\r\n    b.SetHeight(height);\r\n}","ListName":"Set X","Async":"","C2Id":"","Deprecated":""}},"Conditions":{"on-click":{"Id":"on-click","Category":"custom","ListName":null,"ScriptName":"OnClick","Ace":"{\n  \"id\": \"on-click\",\n  \"scriptName\": \"OnClick\",\n  \"isTrigger\": true\n}","DisplayText":null,"Description":null,"Highlight":null,"Language":"\"on-click\":{\n  \"list-name\": \"On click\",\n  \"display-text\": \"On click\",\n  \"description\": \"Triggered when the button is clicked.\"\n}","Code":"OnClick()\n{\n    return true;\n}","Trigger":null,"FakeTrigger":null,"Static":null,"Looping":null,"Invertible":null,"TriggerCompatible":null,"C2Id":"","Deprecated":""},"on-drop":{"Id":"on-drop","Category":"custom","ListName":"On Drop","ScriptName":"OnDrop","Ace":"{\r\n\t\"id\": \"on-drop\",\r\n\t\"scriptName\": \"OnDrop\",\r\n\t\"highlight\": false,\n\t\"isTrigger\": true,\n\t\"isInvertible\": false\r\n}","DisplayText":"this is the display text","Description":"this is the description","Highlight":"false","Language":"\"on-drop\": {\r\n\t\"list-name\": \"On Drop\",\r\n\t\"display-text\": \"On Drop\",\r\n\t\"description\": \"On Drop\"\r\n}","Code":"OnDrop()\r\n{\r\n\treturn true;\r\n}","Trigger":"true","FakeTrigger":"false","Static":"false","Looping":"false","Invertible":"false","TriggerCompatible":"true","C2Id":"","Deprecated":""},"on-drag-over":{"Id":"on-drag-over","Category":"custom","ListName":"On Drag Over","ScriptName":"OnDragOver","Ace":"{\r\n\t\"id\": \"on-drag-over\",\r\n\t\"scriptName\": \"OnDragOver\",\r\n\t\"highlight\": false,\n\t\"isTrigger\": true,\n\t\"isInvertible\": false\r\n}","DisplayText":"this is the display text","Description":"this is the description","Highlight":"false","Language":"\"on-drag-over\": {\r\n\t\"list-name\": \"On Drag Over\",\r\n\t\"display-text\": \"On Drag Over\",\r\n\t\"description\": \"On Drag Over\"\r\n}","Code":"OnDragOver()\r\n{\r\n\treturn true;\r\n}","Trigger":"true","FakeTrigger":"false","Static":"false","Looping":"false","Invertible":"false","TriggerCompatible":"true","C2Id":"","Deprecated":""}},"Expressions":{"text":{"Id":"text","Category":"appearance","ScriptName":null,"IsVariadicParameters":null,"Ace":"{\n  \"id\": \"text\",\n  \"expressionName\": \"Text\",\n  \"scriptName\": \"Text\",\n  \"returnType\": \"string\"\n}","TranslatedName":null,"Description":null,"ReturnType":null,"Language":"\"text\":{\n  \"description\": \"The control text.\",\n  \"translated-name\": \"Text\"\n}","Code":"Text()\n{\n    // Return the button text. Note this returns a copy of the text stored in the instance,\n    // since retrieving the real button text would require an asynchronous message posting\n    // from the runtime to the DOM, and expressions must return synchronously.\n    return this._text;\n}","C2Id":"","Deprecated":""},"file-url-at":{"Id":"file-url-at","Category":"custom","ScriptName":"FileUrlAt","IsVariadicParameters":"fileurlat","Ace":"{\r\n  \"id\": \"file-url-at\",\r\n  \"expressionName\": \"FileUrlAt\",\r\n  \"returnType\": \"any\",\r\n  \"params\": [\r\n    {\r\n      \"id\": \"index\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","TranslatedName":"FileUrlAt","Description":"File URL At","ReturnType":"any","Language":"\"file-url-at\": { \r\n\t\"translated-name\": \"FileUrlAt\",\r\n\t\"description\": \"A URL to access the data of the chosen file at an index.\",\r\n\t\"params\": {\r\n        \"index\": {\r\n            \"name\": \"Index\",\r\n            \"desc\": \"Index\"\r\n        }\r\n    }\r\n}","Code":"FileUrlAt(index)\r\n{\r\n\tconst a = new WeakMap;\r\n\tconst c = this._GetFileAt(index);\r\n    if (!c)\r\n       return \"\";\r\n    let d = a.get(c);\r\n    return d ? d : (d = URL.createObjectURL(c),\r\n           a.set(c, d),\r\n           d)\r\n}","C2Id":"","Deprecated":""},"file-count":{"Id":"file-count","Category":"custom","ScriptName":"FileCount","IsVariadicParameters":"filecount","Ace":"{\r\n\t\"id\": \"file-count\",\r\n\t\"expressionName\": \"FileCount\",\r\n\t\"returnType\": \"number\"\r\n}","TranslatedName":"FileCount","Description":"The number of chosen files","ReturnType":"number","Language":"\"file-count\": { \r\n\t\"translated-name\": \"FileCount\",\r\n\t\"description\": \"The number of chosen files.\"\r\n}","Code":"FileCount()\r\n{\r\n\treturn this._files.length\r\n}","C2Id":"","Deprecated":""},"file-name-at":{"Id":"file-name-at","Category":"custom","ScriptName":"FileNameAt","IsVariadicParameters":"filenameat","Ace":"{\r\n  \"id\": \"file-name-at\",\r\n  \"expressionName\": \"FileNameAt\",\r\n  \"returnType\": \"string\",\r\n  \"params\": [\r\n    {\r\n      \"id\": \"index\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","TranslatedName":"FileNameAt","Description":"Name of chosen file at an index","ReturnType":"string","Language":"\"file-name-at\": { \r\n\t\"translated-name\": \"FileNameAt\",\r\n\t\"description\": \"Name of chosen file at an index.\",\r\n\t\"params\": {\r\n        \"index\": {\r\n            \"name\": \"Index\",\r\n            \"desc\": \"Index\"\r\n        }\r\n    }\r\n}","Code":"FileNameAt(index)\r\n{\r\n\tconst b = this._GetFileAt(index);\r\n    return b ? b[\"name\"] || \"\" : \"\"\r\n}","C2Id":"","Deprecated":""},"file-size-at":{"Id":"file-size-at","Category":"custom","ScriptName":"FileSizeAt","IsVariadicParameters":"filesizeat","Ace":"{\r\n  \"id\": \"file-size-at\",\r\n  \"expressionName\": \"FileSizeAt\",\r\n  \"returnType\": \"number\",\r\n  \"params\": [\r\n    {\r\n      \"id\": \"index\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","TranslatedName":"FileSizeAt","Description":"Size of chosen file at an index","ReturnType":"number","Language":"\"file-size-at\": { \r\n\t\"translated-name\": \"FileSizeAt\",\r\n\t\"description\": \"Size of chosen file at an index.\",\r\n\t\"params\": {\r\n        \"index\": {\r\n            \"name\": \"Index\",\r\n            \"desc\": \"Index\"\r\n        }\r\n    }\r\n}","Code":"FileSizeAt(index)\r\n{\r\n\tconst b = this._GetFileAt(index);\r\n    return b ? b[\"size\"] || 0 : 0\r\n}","C2Id":"","Deprecated":""},"file-type-at":{"Id":"file-type-at","Category":"custom","ScriptName":"FileTypeAt","IsVariadicParameters":"filetypeat","Ace":"{\r\n  \"id\": \"file-type-at\",\r\n  \"expressionName\": \"FileTypeAt\",\r\n  \"returnType\": \"string\",\r\n  \"params\": [\r\n    {\r\n      \"id\": \"index\",\r\n      \"type\": \"number\",\r\n      \"initialValue\": \"0\"\r\n    }\r\n  ]\r\n}","TranslatedName":"FileTypeAt","Description":"MIME type of chosen file at an index","ReturnType":"string","Language":"\"file-type-at\": { \r\n\t\"translated-name\": \"FileTypeAt\",\r\n\t\"description\": \"MIME type of chosen file at an index.\",\r\n\t\"params\": {\r\n        \"index\": {\r\n            \"name\": \"Index\",\r\n            \"desc\": \"Index\"\r\n        }\r\n    }\r\n}","Code":"FileTypeAt(index)\r\n{\r\n\tconst b = this._GetFileAt(index);\r\n    return b ? b[\"type\"] || \"\" : \"\"\r\n}","C2Id":"","Deprecated":""}},"ThirdPartyFiles":{"domSide.js":{"FileName":"domSide.js","Content":"\"use strict\";\r\n\r\n{\r\n\t// In the C3 runtime's worker mode, all the runtime scripts (e.g. plugin.js, instance.js, actions.js)\r\n\t// are loaded in a Web Worker, which has no access to the document so cannot make DOM calls. To help\r\n\t// plugins use DOM elements the runtime internally manages a postMessage() bridge wrapped in some helper\r\n\t// classes designed to manage DOM elements. Then this script (domSide.js) is loaded in the main document\r\n\t// (aka the main thread) where it can make any DOM calls on behalf of the runtime. Conceptually the two\r\n\t// ends of the messaging bridge are the \"Runtime side\" in a Web Worker, and the \"DOM side\" with access\r\n\t// to the Document Object Model (DOM). The addon's plugin.js specifies to load this script on the\r\n\t// DOM side by making the call: this._info.SetDOMSideScripts([\"c3runtime/domSide.js\"])\r\n\t// Note that when NOT in worker mode, this entire framework is still used identically, just with both\r\n\t// the runtime and the DOM side in the main thread. This allows non-worker mode to work the same with\r\n\t// no additional code changes necessary. However it's best to imagine that the runtime side is in a\r\n\t// Web Worker, since that is when it is necessary to separate DOM calls from the runtime.\r\n\t\r\n\t// NOTE: use a unique DOM component ID to ensure it doesn't clash with anything else\r\n\t// This must also match the ID in instance.js and plugin.js.\r\n\tconst DOM_COMPONENT_ID = \"stranianelli_draganddropfiles\";\r\n\r\n\tfunction StopPropagation(e)\r\n\t{\r\n\t\te.stopPropagation();\r\n\t}\r\n\r\n\tconst HANDLER_CLASS = class MyDOMHandler extends DOMElementHandler\r\n\t{\r\n\t\tconstructor(iRuntime)\r\n\t\t{\r\n\t\t\tsuper(iRuntime, DOM_COMPONENT_ID);\r\n\t\t}\r\n\r\n\t\tCreateElement(elementId, e)\r\n\t\t{\r\n\t\t\r\n\t\t\tconst elem = document.createElement(\"div\");\t\r\n\t\t\t\r\n\t\t\telem.style.position = \"absolute\";\r\n\t\t\telem.style.backgroundColor = \"yellow\";\r\n\t\t\t\r\n\t\t\telem.id = e[\"id\"];\r\n\t\t\t\r\n\t\t\telem.style.fontFamily = \"sans-serif\";\r\n            elem.style.color = \"black\";\r\n            elem.style.fontSize = e[\"fontsize\"] + \"pt\";\r\n\t\t\t\r\n\t\t\tif (!e[\"visible\"]) {\r\n\t\t\t\telem.style.display = \"none\";\r\n\t\t\t}\r\n\t\t\t   \r\n\t\t\t// Prevent touches reaching the canvas\r\n\t\t\telem.addEventListener(\"touchstart\", StopPropagation);\r\n\t\t\telem.addEventListener(\"touchmove\", StopPropagation);\r\n\t\t\telem.addEventListener(\"touchend\", StopPropagation);\r\n\t\t\t\r\n\t\t\t// Prevent clicks being blocked\r\n\t\t\telem.addEventListener(\"mousedown\", StopPropagation);\r\n\t\t\telem.addEventListener(\"mouseup\", StopPropagation);\r\n\t\t\t\r\n\t\t\t// Prevent key presses being blocked by the Keyboard object\r\n\t\t\telem.addEventListener(\"keydown\", StopPropagation);\r\n\t\t\telem.addEventListener(\"keyup\", StopPropagation);\r\n\t\t\t\r\n\t\t\t// elem.addEventListener(\"drop\", () => this.PostToRuntimeElement(\"drop\", elementId));\r\n\t\t\telem.addEventListener(\"dragover\", (ev) => {\r\n\t\t\t\t\tev.preventDefault();\r\n\t\t\t\t\tthis.PostToRuntimeElement(\"dragover\", elementId);\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\telem.addEventListener(\"drop\", (ev)=> {\r\n\t\t\t\t\tev.preventDefault();\r\n\t\t\t\t\tlet elencoFile = [];\r\n\t\t\t\t\tif  (ev.dataTransfer.items)  {\r\n\t\t\t\t\t\t//  Use  DataTransferItemList  interface  to  access  the  file(s)\r\n\t\t\t\t\t\tfor  (var  i  =  0;  i  <  ev.dataTransfer.items.length;  i++)  {\r\n\t\t\t\t\t\t\t//  If  dropped items  aren't  files,  reject  them\r\n\t\t\t\t\t\t\tif  (ev.dataTransfer.items[i].kind  ===  'file')  {\r\n\t\t\t\t \t\t\t\tvar  file  =  ev.dataTransfer.items[i].getAsFile();\r\n\t\t\t\t \t\t\t\t\r\n\t\t\t\t \t\t\t\tif (file.type === e[\"accept\"] || e[\"accept\"] == \"\") {\r\n\t\t\t\t \t\t\t\t\t//console.log('...  file['  +  i  +  '].name  =  '  +  file.name);\r\n\t\t\t\t \t\t\t\t\telencoFile.push(ev.dataTransfer.items[i].getAsFile());\r\n\t\t\t\t \t\t\t\t}\r\n\t\t\t\t \t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}  else  {\r\n\t\t\t\t \t\t//  Use  DataTransfer  interface  to  access  the  file(s)\r\n\t\t\t\t\t\t for  (var  i  =  0;  i  <  ev.dataTransfer.files.length;  i++)  {\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t \tif (files[i].type === e[\"accept\"] || e[\"accept\"] == \"\") {\r\n\t\t\t\t \t\t\t\t\t//console.log('...  file['  +  i  +  '].name  =  '  +  ev.dataTransfer.files[i].name);\r\n\t\t\t\t \t\t\t\t\telencoFile.push(ev.dataTransfer.files[i]);\r\n\t\t\t\t \t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.PostToRuntimeElement(\"drop\", elementId, {\r\n                \t\t\t\t\t\t\t\t\t\t\"files\": elencoFile\r\n            \t\t\t\t\t\t\t\t\t});\r\n            })\r\n\r\n\t\t\t// Attach click event which posts a message to the runtime telling it that this event happened.\r\n\t\t\telem.addEventListener(\"click\", () => this.PostToRuntimeElement(\"click\", elementId,  {}));\r\n\r\n\t\t\t// The create message includes the state retrieved by GetElementState() in instance.js,\r\n\t\t\t// so also update the element state based on those details.\r\n\t\t\tthis.UpdateState(elem, e);\r\n\r\n\t\t\treturn elem;\r\n\t\t}\r\n\r\n\t\tUpdateState(elem, e)\r\n\t\t{\r\n\t\t\t// Update the state of the DOM element 'elem' with the state 'e'. The state has been\r\n\t\t\t// retrieved by calling GetElementState() in instance.js, which includes all necessary\r\n\t\t\t// details to set the correct state of the DOM element.\r\n\t\t\t// NOTE: the runtime automatically manages the position, size and visibility of the DOM\r\n\t\t\t// element, so this only needs to handle state unique to the element, such as the button\r\n\t\t\t// text in this case.\r\n\t\t\telem.textContent = e[\"text\"];\t\t\t\r\n\t\t}\r\n\t};\r\n\t\r\n\tRuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS);\r\n}","PluginTemplate":"this._info.AddFileDependency(\n{\n    filename: \"c3runtime/domSide.js\",\n    type: \"inline-script\"\n});","Bytes":null,"Extention":".js","C3Folder":true,"C2Folder":false,"Rootfolder":false,"MimeType":"application/x-javascript","FileType":"inline-script","Compress":false,"PlainText":true}},"C2RunTime":""}